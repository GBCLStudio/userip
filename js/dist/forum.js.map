{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://gbcl-userip/webpack/bootstrap","webpack://gbcl-userip/webpack/runtime/compat get default export","webpack://gbcl-userip/webpack/runtime/define property getters","webpack://gbcl-userip/webpack/runtime/hasOwnProperty shorthand","webpack://gbcl-userip/webpack/runtime/make namespace object","webpack://gbcl-userip/external root \"flarum.core.compat['forum/app']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/extend']\"","webpack://gbcl-userip/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/Model']\"","webpack://gbcl-userip/./src/forum/ProcessData.tsx","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://gbcl-userip/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://gbcl-userip/external root \"flarum.core.compat['common/Component']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://gbcl-userip/./src/forum/components/GeoIpToolBar.tsx","webpack://gbcl-userip/external root \"flarum.core.compat['common/extenders']\"","webpack://gbcl-userip/external root \"flarum.core.compat['common/models/Post']\"","webpack://gbcl-userip/./src/forum/Model/IPInfo.ts","webpack://gbcl-userip/./src/forum/extend.ts","webpack://gbcl-userip/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport { NestedStringArray } from '@askvortsov/rich-icu-message-formatter'\nimport IPInfo from './Model/IPInfo'\n\nexport type Data = {\n  countryCode: NestedStringArray\n  region: NestedStringArray\n  isp: NestedStringArray\n  city: NestedStringArray\n  province: NestedStringArray\n  backboneIsp: NestedStringArray\n  areaCode: NestedStringArray\n  district: NestedStringArray\n} & Record<string, NestedStringArray>\n\nexport default class ProcessData {\n  private data: Data\n\n  constructor(ipInfo: IPInfo) {\n    this.data = {\n      countryCode: ipInfo.countryCode(),\n      region: ipInfo.region(),\n      isp: ipInfo.isp(),\n      city: ipInfo.city(),\n      province: ipInfo.province(),\n      backboneIsp: ipInfo.backboneIsp(),\n      areaCode: ipInfo.areaCode(),\n      district: ipInfo.district(),\n    }\n  }\n\n  process(errorNotice: NestedStringArray) {\n    const elements = {} as Data\n    let errorCount = 0\n\n    for (const [key, value] of Object.entries(this.data)) {\n      if (errorCount > 2) return false\n\n      errorCount = value ? errorCount : ++errorCount\n      elements[key] = value || errorNotice\n    }\n\n    return elements\n  }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Component, { ComponentAttrs } from 'flarum/common/Component'\nimport { Data } from '../ProcessData'\nimport app from 'flarum/forum/app'\nimport Tooltip from 'flarum/common/components/Tooltip'\n\nconst BADGE_OPTIONS_KEY = 'badgeOptions'\nconst HOVER_OPTIONS_KEY = 'hoverOptions'\n\nexport interface GeoIpBarAttrs extends ComponentAttrs {\n  elements: Data\n}\n\ninterface Settings {\n  service: {\n    [BADGE_OPTIONS_KEY]: string\n    [HOVER_OPTIONS_KEY]: string\n  }\n}\n\nenum Service {\n  Badge,\n  Hover,\n}\n\nexport default class GeoIpToolBar<\n  CustomAttrs extends GeoIpBarAttrs = GeoIpBarAttrs\n> extends Component<CustomAttrs> {\n  view() {\n    const settings = JSON.parse(app.forum.attribute('GbclUserIp')) as Settings\n\n    return (\n      <Tooltip text={this.getOptions(Service.Hover, settings)}>\n        <div className='userIp-container'>\n          <div className='ip-locate' id='info-country'>\n            {`${this.getOptions(Service.Badge, settings)}`}\n          </div>\n        </div>\n      </Tooltip>\n    )\n  }\n\n  getOptions(service: Service, settings: Settings) {\n    const { elements } = this.attrs\n\n    return settings.service[\n      service === Service.Badge ? BADGE_OPTIONS_KEY : HOVER_OPTIONS_KEY\n    ]\n      .split('|')\n      .map(value => `${elements[value]} |`)\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extenders'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport { NestedStringArray } from '@askvortsov/rich-icu-message-formatter'\nimport Model from 'flarum/common/Model'\n\nexport default class IPInfo extends Model {\n  countryCode = Model.attribute<NestedStringArray>('countryCode')\n  region = Model.attribute<NestedStringArray>('region')\n  isp = Model.attribute<NestedStringArray>('isp')\n  city = Model.attribute<NestedStringArray>('city')\n  province = Model.attribute<NestedStringArray>('province')\n  backboneIsp = Model.attribute<NestedStringArray>('backboneisp')\n  areaCode = Model.attribute<NestedStringArray>('areaCode')\n  district = Model.attribute<NestedStringArray>('district')\n}\n","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport Extend from 'flarum/common/extenders'\nimport Post from 'flarum/common/models/Post'\nimport ipinfo from './Model/IPInfo'\n\nexport default [\n  new Extend.Model(Post)\n    .hasOne<ipinfo>('userip_info')\n    .attribute<ipinfo>('userIpInfo'),\n\n  new Extend.Store().add('userip_info', ipinfo),\n]\n","/*\n * This file is part of GBCLStudio Project.\n *\n * Copyright (c) 2023 GBCLStudio PHP Project Team.\n *\n * For the full copyright and license information, please view the LICENSE.md\n * file that was distributed with this source code.\n */\n\nimport app from 'flarum/forum/app'\nimport { extend } from 'flarum/common/extend'\nimport CommentPost from 'flarum/forum/components/CommentPost'\nimport Model from 'flarum/common/Model'\nimport ProcessData from './ProcessData'\nimport GeoIpToolBar from './components/GeoIpToolBar'\n\n// still learning\nexport { default as extend } from './extend'\n\napp.initializers.add('gbcl/userip', () => {\n  const errorNotice = app.translator.trans('gbcl-userip.forum.unknownNotice')\n\n  app.store.models.posts.prototype.userIpInfo = Model.hasOne('userip_info')\n\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const ipInfo = this.attrs.post.userIpInfo()\n    if (!ipInfo) return\n\n    const result = new ProcessData(ipInfo).process(errorNotice)\n    result && items.add('userIp', <GeoIpToolBar elements={result} />)\n  })\n})\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","ProcessData","ipInfo","data","this","countryCode","region","isp","city","province","backboneIsp","areaCode","district","process","errorNotice","elements","errorCount","_i","_Object$entries","entries","length","_Object$entries$_i","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Service","GeoIpToolBar","_Component","apply","arguments","_proto","view","settings","JSON","parse","app","attribute","m","Tooltip","text","getOptions","Hover","className","id","Badge","service","attrs","split","map","Component","IPInfo","_Model","_this","_len","args","Array","_key","concat","Model","Extend","Post","hasOne","add","ipinfo","trans","models","posts","userIpInfo","extend","CommentPost","items","post","result"],"sourceRoot":""}